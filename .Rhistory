source("~/hclustering/2856524/gavin_autofcgating_v2.R")
warnings()
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
install.packages("flowCore", "CytoML", "flowWorkspace", "openCyto")
BiocManager
BiocManager::
BiocManager::install
install.packages("BioCManager")
install.packages("BiocManager")
BiocManager::install("flowCore")
BiocManager::install("CytoML")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
BiocManager::install("flowWorkspaceData")
BiocManager::install("flowWorkspaceData")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
BiocManager::install("openCyto")
gtFile <- system.file("extdata/gating_template/tcell.csv", package = "openCyto")
gtFile
dtTemplate <- fread(gtFile, autostart = 1L)
dtTemplate
library(data.table)
dtTemplate <- fread(gtFile, autostart = 1L)
dtTemplate
BiocManager::install("openCyto")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
BiocManager::install("openCyto")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
rlang::last_error()
rlang::last_error()
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
labels(res)
labels(res)
View(res)
label(res)
label(res[[0]])
labels(res[[1]])
papeR::labels(res)
?labels
foreach(res) %do% attributes
foreach(res) %do% attributes()
foreach(n=res) %do% attributes(n)
foreach(n=res) %do% attributes(n)$label
labels <- function(x){
foreach(n=x) %do% attributes(n)$label
}
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
# generate ptree
#p$data <- cbind(newdata, p$data)
plot_dendro(res)
#foreach(n=x) %do% attributes(n)$label
attributes(x)$label
getTests <- function(result, gh, root=NULL){
library(matrixStats)
paths <- rev(gh_get_pop_paths(gh))
popmem <- foreach(pop=paths, .combine='cbind') %do% gh_pop_get_indices(gh, pop)
colnames(popmem) <- paths
if (is.null(root)){
result <- testClust(result, gh, result, popmem, paths)
root <- result
}
for (clustno in seq_len(length(result))){
# use this code to have "not better than randomly pulling items from the entire dataset" as null hypothesis
# clust <- testClust(result[[clustno]], gh, root, popmem, paths)
# use this code to have "not better than randomly pulling items from the parent cluster" as null hypothesis
clust <- testClust(result[[clustno]], gh, result, popmem, paths)
if (is.null(attributes(clust)$leaf) || !attributes(clust)$leaf){
result[[clustno]] <- getTests(clust, gh, root)
} else {
result[[clustno]] <- clust
}
}
return(result)
}
# do unsupervised gating
res <- better_hclust(as.data.frame(exprs(fs[[1]])), depth=3)
# perform statistical tests
res <- getTests(res, gs[[1]])
View(res)
english_data_ngrams
source("~/hclustering/2856524/gavin_autofcgating_v2.R")
# Read data
raw_english_data <- read.table("output.csv", header=F, fill = TRUE, sep=",")
# Create table of reads
english_data_ngrams <- tibble()
#for (row in 1:nrow(raw_english_data)) {
for (row in 1:500) {
# Initialze user
english_data_ngrams[row, ] <- 0
# Get # of tweets
num_tweets <- 0
for (tweet in raw_english_data[row, ]) {
if (tweet != "") {
num_tweets <- num_tweets + 1
}
}
# Iterate through their tweets
for (tweet in raw_english_data[row, ]) {
# Split tweet into ngrams
all_ngrams_for_tweet <- strsplit(tweet, ' ')[[1]]
for (ngram in all_ngrams_for_tweet) {
# Add ngram
if (length(ngram) != 0) {
if (!(ngram %in% colnames(english_data_ngrams))) {
english_data_ngrams[, ngram] <- 0
}
english_data_ngrams[row, ngram] <- english_data_ngrams[row, ngram] + (1 / num_tweets)
}
}
}
if (mod(row, 100) == 0) {
print(paste(row, " / ", nrow(raw_english_data)))
#to_include <- c()
#for (ngram in colnames(english_data_ngrams)) {
#  if (ngram != "" && (colSums(english_data_ngrams)[ngram] * nrow(raw_english_data) / row) > 3) {
#    to_include <- c(to_include, ngram)
#  }
#}
#english_data_ngrams <- english_data_ngrams %>% select(to_include)
#print(paste(row, " / ", nrow(raw_english_data)))
}
}
View(english_data_ngrams)
res_english <- better_hclust(english_data_ngrams, depth=3)
members <- foreach(i = seq_len(length(res_english))) %do% raw_english_data[attributes(res_english[[i]])[["the_members"]],]
View(members)
changes <- foreach(i = seq_len(length(res_english))) %do% { sort((log(attributes(res_english[[i]])[["avgs"]]) - log(attributes(res_english)[["avgs"]]))) }
changes <- foreach(i = seq_len(length(res_english))) %do% sort(unlist(ifelse(abs(changes[[i]]) == Inf, NA, changes[[i]])))
changes <- foreach(i = seq_len(length(res_english))) %do% changes[[i]][!is.na(changes[[i]])]
changes <- foreach(i = seq_len(length(res_english))) %do% changes[[i]][names(sort(-abs(changes[[i]])))]
View(changes)
View(members[[1]])
View(members[[2]])
View(members[[3]])
View(members[[4]])
write.csv(members[[1]], "rogan_aficionados.csv")
write.csv(members[[2]], "political_twitter.csv")
write.csv(members[[3]], "3_informational_twitter.csv")
write.csv(members[[3]], "4_other_twitter.csv")
members <- foreach(i = seq_len(length(res_english))) %do% raw_english_data[attributes(res_english[[1]][[i]])[["the_members"]],]
res_english
members <- foreach(i = seq_len(length(res_english))) %do% raw_english_data[attributes(res_english[1][[i]])[["the_members"]],]
members <- foreach(i = seq_len(length(res_english[[1]]))) %do% raw_english_data[attributes(res_english[[1]][[i]])[["the_members"]],]
members <- foreach(i = seq_len(length(res_english[[3]]))) %do% raw_english_data[attributes(res_english[[3]][[i]])[["the_members"]],]
write.csv(members[[1]], "3_1_crypto_twitter.csv")
write.csv(members[[2]], "3_2_other_informational_twitter.csv")
members <- foreach(i = seq_len(length(res_english[[4]]))) %do% raw_english_data[attributes(res_english[[4]][[i]])[["the_members"]],]
write.csv(members[[1]], "4_1_crypto_gaw_twitter.csv")
write.csv(members[[1]], "4_2_optimistic_twitter.csv")
write.csv(members[[1]], "4_3_casual_twitter.csv")
members <- foreach(i = seq_len(length(res_english[[3]]))) %do% raw_english_data[attributes(res_english[[3]][[i]])[["the_members"]],]
write.csv(members[[3]], "3_2_other_informational_twitter.csv")
write.csv(members[[4]], "3_2_other_informational_twitter.csv")
write.csv(members[[5]], "3_2_other_informational_twitter_2.csv")
write.csv(members[[3]], "3_1_crypto_twitter_3.csv")
members <- foreach(i = seq_len(length(res_english[[4]]))) %do% raw_english_data[attributes(res_english[[4]][[i]])[["the_members"]],]
length(members)
write.csv(members[[1]], "4_1_crypto_gaw_twitter.csv")
write.csv(members[[2]], "4_1_crypto_gaw_twitter.csv")
write.csv(members[[3]], "4_1_crypto_gaw_twitter.csv")
write.csv(members[[3]], "4_2_optimistic_twitter.csv")
write.csv(members[[4]], "4_2_optimistic_twitter.csv")
write.csv(members[[4]], "4_3_casual_twitter_1.csv")
write.csv(members[[5]], "4_3_casual_twitter_2.csv")
